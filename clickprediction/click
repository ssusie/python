{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from math import exp, log\n",
    "from __future__ import division\n",
    "import scipy.sparse as sp\n",
    "import pdb\n",
    "import matplotlib.patches as mpatches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def myCooDescent(w0,w,y,X,lyambda):\n",
    "    # LASSO with coordinate descent\n",
    "    # Subset selection\n",
    "    # From HW1\n",
    "    \n",
    "    N,d=X.shape\n",
    "    wOld=w #keep for computations\n",
    "    wNew=wOld \n",
    "    kmax=50 #max number of iterations\n",
    "    eps=10**(-3) # for convergence\n",
    "    w0old=w0\n",
    "    \n",
    "    for kk in range(kmax):\n",
    "        errorOld=np.square(np.linalg.norm(y-X*wOld-w0old, ord=2))+lyambda*np.linalg.norm(wOld, ord=1)\n",
    "        \n",
    "        yhat=X*wOld+w0old\n",
    "        w0new=np.sum(y-yhat+w0old)/N\n",
    "        yhat=yhat-w0old+w0new\n",
    "    \n",
    "        for jj in range(d):\n",
    "            start, end = X.indptr[jj], X.indptr[jj+1]\n",
    "            aj=2*np.sum(np.square(X.data[start:end]))\n",
    "            \n",
    "            cj=2*np.sum(X.data[start:end]*(y[X.indices[start:end]]-\\\n",
    "                                               yhat[X.indices[start:end]]+X.data[start:end]*wOld[jj]))\n",
    "            if cj+lyambda<0:\n",
    "                wNew[jj]=(cj+lyambda)/aj\n",
    "            elif cj-lyambda>0:\n",
    "                wNew[jj]=(cj-lyambda)/aj\n",
    "            else:\n",
    "                wNew[jj]=0\n",
    "                \n",
    "        if np.linalg.norm(wNew-wOld,ord=np.inf)<eps:\n",
    "            return (w0,wNew)\n",
    "        else:\n",
    "            wOld=wNew\n",
    "            w0old=w0new\n",
    "            \n",
    "        errorNew=np.square(np.linalg.norm(y-X*wNew-w0, ord=2))+lyambda*np.linalg.norm(wNew, ord=1)\n",
    "        if errorOld-errorNew<10**(-3):\n",
    "            print('error grows', jj)\n",
    "                \n",
    "    if kk==kmax-1:\n",
    "        print('reached max iter')\n",
    "        return (w0, wNew)\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 7.3759133805173546e-07)\n",
      "(200, 4.3366851522418326e-07)\n",
      "(300, 2.6119407884514379e-07)\n",
      "(400, 1.8458577348482933e-07)\n",
      "(500, 1.3268964034008097e-07)\n",
      "(600, 1.1957668245176783e-07)\n",
      "(700, 8.7114254654872846e-08)\n",
      "(800, 7.637212161691271e-08)\n",
      "(900, 7.1199953216071782e-08)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1059e0ad0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrVajVqt1IiQzs55Rr9ep1+ttW1/hvXNK2gj4IXB9RHyjYZ5r/BXih8Kbtcd4a/yF7vFLEnAhsLQx\n6Vu1+KHwZuVRdI1/b+DjwP6SFqbhsILbtBLyQ+HNyqPQPf6IuBXfJGb4ofBmZeKkbB3hh8KblYcT\nv3WEHwpvVh5+5q51jB8Kb9Yefti6mVnFlLrLBjMzKx8nfjOzinHiNzOrGCd+M7OKceI3M6sYJ34z\ns4px4jczq5iO9Mdv1kvcfbRt6Jz4zXLcfbRVgUs9ZjnuPtqqwHv8Zjm91H20S1K2vpz4zXJ6pfto\nl6RsPFzqMcvple6jXZKy8fAev1nO4N7ynDlfznUffVjp9qJ7qSRl5VP0w9a/A8wAnoyI3Ypsy6xd\nZszYt3SJvlGvlKSsnIou9VwE+OHqZm3WKyUpK6eiH7Z+i6Qdi2zDrIp6pSRl5VT4E7hS4r9uuFKP\nn8BlZtY6P4HLzMxa0vWrevr7+9eN12o1arVa12Ixs/bzjWbjV6/XqdfrbVufSz1mVpjhbjTr6zuN\n88471Ml/HEpd6pF0OXA78A5JyyUdX2R7ZlYuvtGsnIq+que4ItdvZuXWKzeaVa0c1fUav5ltuHrh\nRrMq9nvkq3rMrDC9cKNZL5Wj5s5dwKGHfmnc6/Eev5kVphduNOulctRrRyZnjrn8aJz4zaxQZe/7\nqBfKUTD8kcn6cqnHzCqtF8pRMPKRyfrwHr+ZVVovlKNg5COT9VH4DVyjNu4buMzMmjK0xj++G7i8\nx29m1gPyRyY33ji+dXmP38ysx5S6ywYzMysfJ34zs4px4jczqxgnfjOzinHiNzOrGCd+M7OKceI3\nM6sYJ34zs4px4jczqxgnfjOziin6YeuHSVom6ZeSTiqyLTMza05hiV/SROCbwGHALsBxkt5ZVHtF\nqtfr3Q6hKY6zvRxne/VCnL0QYzsUucf/fuBXEfFQRPwe+B7wkQLbK0yv/DE4zvZynO3VC3H2Qozt\nUGTi3x5Ynnv9SJpmZmZdVGTid3/LZmYlVFh//JL2Avoj4rD0+hRgbUSck1vGXw5mZuthPP3xF5n4\nJwH/DzgQeBT4GXBcRDxQSINmZtaUwh69GBGvSvpb4EZgInChk76ZWfd19dGLZmbWeUXfwPUdSU9I\nWpybtpWk+ZJ+IWmepOm5eaekm72WSTqkyNga4txB0s2Slki6X9KsssUqaYqkOyUtkrRU0tlli7Eh\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105959e90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate data\n",
    "N,d=1000,50;\n",
    "w=np.ones(d)\n",
    "Xbig=np.random.randn(N,d)\n",
    "noise=0.001*np.random.randn(N)\n",
    "Y=Xbig.dot(w)+noise\n",
    "Renj=range(N)\n",
    "valsN=Renj[100::100] # choose different n to fit the data\n",
    "error=np.zeros(len(valsN))\n",
    "k=0\n",
    "for n in valsN:\n",
    "    X=Xbig[0:n,:];\n",
    "    w_ls=np.linalg.lstsq(X, Y[0:n])[0]\n",
    "    error[k]=np.linalg.norm(w_ls-w, ord=2)**2\n",
    "    k+=1\n",
    "    print(n,error[k-1] )\n",
    "plt.plot(valsN,error, 'bo')\n",
    "plt.xlabel('Values of N')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Error from Least Squares')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The more data you have the better fit you get for the parameters. It seems to decrese exponentially."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x105ed9790>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105985890>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N,d=1000,50;\n",
    "w=np.zeros(d)\n",
    "w[0]=5\n",
    "Xbig=np.random.randn(N,d)\n",
    "noise=0.001*np.random.randn(N)\n",
    "Y=Xbig.dot(w)+noise\n",
    "R=range(N)\n",
    "valsN=R[100::50]#, 2000, 5000, 6000, 7000, 9000, 10000]\n",
    "k,w0=0,0\n",
    "w_guess=np.random.randn(d)\n",
    "errorLS=np.zeros(len(valsN))\n",
    "errorCD=np.zeros(len(valsN))\n",
    "Xsparse=sp.csc_matrix(Xbig)\n",
    "lyambda=0.9\n",
    "for n in valsN:\n",
    "    X=Xsparse[0:n,:];\n",
    "    XLS=Xbig[0:n,:];\n",
    "    w_ls=np.linalg.lstsq(XLS, Y[0:n])[0]\n",
    "    errorLS[k]=np.linalg.norm(w_ls-w, ord=2)**2\n",
    "    \n",
    "    for jj in range(5):\n",
    "            w0,w_guess=myCooDescent(w0,w_guess,Y[0:n],X,lyambda)\n",
    "            lyambda=0.9*lyambda\n",
    "                        \n",
    "    errorCD[k]=np.linalg.norm(w_guess-w, ord=2)**2\n",
    "    k+=1\n",
    "\n",
    "\n",
    "plt.plot(valsN,errorLS, 'bo')\n",
    "plt.plot(valsN,errorCD, 'r*')\n",
    "plt.xlabel('Values of N')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Error from Least Squares and Lasso')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x105ec5690>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105959d10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(valsN[10:],errorLS[10:], 'bo')\n",
    "plt.plot(valsN[10:],errorCD[10:], 'r*')\n",
    "plt.xlabel('Values of N')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Error from Least Squares and Lasso')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The red stars represent the error $||w_{guess}-w||$ from Lasso algorithm implemented using coordinate decent and blue circles are the error from least squares for different Values of N."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, the Least Squares is the best possible fit when our data represents a line with Gaussian noise. Therefore, it makes sense that lasso gave worse Result then Least squares."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Problem 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Susie\n"
     ]
    }
   ],
   "source": [
    "#load data\n",
    "%run start.py\n",
    "training_data = genfromtxt('train.txt', delimiter=',')\n",
    "oversampled=genfromtxt('oversampled_train.txt', delimiter=',')\n",
    "Y_train = training_data[:,0]\n",
    "X_train = training_data[:, 1:]\n",
    "Y_trainOversample=oversampled[:,0]\n",
    "X_trainOversample=oversampled[:,1:]\n",
    "Y_test = genfromtxt('test_label.txt', delimiter=',')\n",
    "X_test = genfromtxt('test.txt', delimiter=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def LogLoss(w0,w,X,Y,N):\n",
    "#     if N>1:\n",
    "#         sumLog=np.sum(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "#     else:\n",
    "#         sumLog=(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "    sumLog=(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "    logloss=0.5*lam*np.linalg.norm(w, ord=2)**2+sumLog/N\n",
    "#     pdb.set_trace()\n",
    "    return logloss\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def myBatch_GD(w0, w, X, y, eta, lyambda,N):\n",
    "    #algorithm to do linear regression with batch gradient decent\n",
    "    # minimizes log loss function:\n",
    "    #     l(x,w0,w)=0.5*lyambda*norm(w,2)**2-1/N*sum(ln(P(y_j|X_j,w0,w)))\n",
    "    #INPUT: w0 - scalar, initial guess for offset term\n",
    "    # w - d dimentional vector, initial guess for w\n",
    "    # X- Nxd matrix\n",
    "    # y- N dimentional lables\n",
    "    # eta - how much to move in gradient direction\n",
    "    # lyambda -  regularizer\n",
    "    #OUTPUT: w0 and w\n",
    "\n",
    "    numerator=exp(X.dot(w)+w0)\n",
    "    denominator=1+numerator\n",
    "    dl0=np.sum(numerator/denominator-y) # derivative wrt w0\n",
    "    dl=X.T.dot(-y+numerator/denominator) #derivative wrt w vector \n",
    "    \n",
    "    w0=w0-eta*dl0/N; #update w0\n",
    "    w=w-eta*(lyambda*w+dl/N)\n",
    "    return (w0, w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def Batch_GD(w0, w, X, Y, eta, lam, nloop):\n",
    "    # performs Batch Gradient Descent  algorithms \n",
    "    # updating w, w0 nloop times\n",
    "    # also returns logloss function\n",
    "    \n",
    "    logLoss=np.zeros(nloop)\n",
    "    N=Y.shape\n",
    "    for k in range(nloop):\n",
    "        w0,w=myBatch_GD(w0, w, X, Y, eta, lam,N)\n",
    "#         ll=LogLoss(w0,w,X,Y,N)\n",
    "#         logLoss[k]=ll\n",
    "#         logloss[k]=LogLoss(w0,w,X,Y,N)\n",
    "        sumLog=np.sum(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "        logLoss[k]=0.5*lam*np.linalg.norm(w, ord=2)**2+sumLog/N\n",
    "    return (w0,w,logLoss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def prediction(w0, w, X):\n",
    "    # given w0,w and X \n",
    "    # calculates prediction for Y, which is 0 if \n",
    "    # exp(w0+X*w)/(1+exp(w0+X.w))<0.5 and 1 otherwise\n",
    "    n,d=X.shape\n",
    "    top=exp(w0+X.dot(w))\n",
    "    bottom=1+top\n",
    "    prob=top/bottom\n",
    "    predict=np.zeros(n)\n",
    "    predict[prob>=0.5]=1\n",
    "    return predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def SumSquaredError(w0, w,X, Y):\n",
    "    # calculates the sum of squared error of prediction and real data\n",
    "    pred=prediction(w0,w,X)\n",
    "    SumSquaredError=np.linalg.norm(Y-pred, ord=2)**2\n",
    "    return SumSquaredError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def convergeBDG(w0,w,X,Y,eta,lam):\n",
    "    # implements Batch Gradient Descent Algorithm\n",
    "    # with convergence criterion |logloss(k)-logloss(k-1)|<eps\n",
    "    N=Y.shape\n",
    "    logLoss=np.zeros(Y.shape)\n",
    "#     ll=LogLoss(w0,w,X,Y,N)\n",
    "#     logLoss[0]=ll\n",
    "    sumLog=np.sum(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "    logLoss[0]=0.5*lam*np.linalg.norm(w, ord=2)**2+sumLog/N\n",
    "    s,k,eps=1, 1, 5*10**(-4)\n",
    "    while s>=eps:\n",
    "        w0,w=myBatch_GD(w0, w, X, Y, eta, lam,N)\n",
    "        sumLog=np.sum(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "        logLoss[k]=0.5*lam*np.linalg.norm(w, ord=2)**2+sumLog/N\n",
    "#         logLoss[k]=LogLoss(w0,w,X,Y,N)\n",
    "#         ll=LogLoss(w0,w,X,Y,N)\n",
    "#         logLoss[k]=ll\n",
    "        s=abs(logLoss[k]-logLoss[k-1])\n",
    "        k+=1\n",
    "    print k-1\n",
    "    return(w0,w,logLoss[0:k-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def StochGD(w0,w,X,Y,eta,lam):\n",
    "    # Implements Stochastic Gradient Descent\n",
    "    # using only one data point to update the gradient and therefore w\n",
    "    \n",
    "    N,d=X.shape\n",
    "    logLoss=np.zeros(N)\n",
    "    for k in range(N):\n",
    "        w0,w=myBatch_GD(w0, w, X[k,:], Y[k], eta, lam, N)\n",
    "        sumLog=np.sum(-Y*((X.dot(w)+w0).T)+log(1+exp(w0+X.dot(w))))\n",
    "        logLoss[k]=0.5*lam*np.linalg.norm(w, ord=2)**2+sumLog/N\n",
    "#     ll=LogLoss(w0,w,X,Y,N)\n",
    "#     pdb.set_trace()\n",
    "#     logLoss[k]=ll    \n",
    "\n",
    "    return (w0,w, logLoss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def PrecisionRecall(pred, Y):\n",
    "    my0Pred=sum(pred==0)\n",
    "    my1Pred=sum(pred==1)\n",
    "\n",
    "    true0=sum(Y==0)\n",
    "    true1=sum(Y==1)\n",
    "\n",
    "    true0Pred=0\n",
    "    true1Pred=0\n",
    "    for k in range(len(Y)):\n",
    "        if pred[k]==Y[k]:\n",
    "            if pred[k]==0:\n",
    "                true0Pred+=1\n",
    "            else:\n",
    "                true1Pred+=1\n",
    "\n",
    "    #precision\n",
    "    if my0Pred==0:\n",
    "        precision0=0\n",
    "    else:\n",
    "        precision0=true0Pred/my0Pred\n",
    "\n",
    "    if my1Pred==0:\n",
    "        precision1=0\n",
    "    else:\n",
    "        precision1=true1Pred/my1Pred\n",
    "\n",
    "    recall0=true0Pred/true0\n",
    "    recall1=true1Pred/true1\n",
    "\n",
    "\n",
    "    print('precision for 0 ', precision0, 'precision for 1 ', precision1)\n",
    "    print('recall for 0 ', recall0, 'recall for 1 ', recall1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.4.1\n",
    "#####The update for Batch Gradient Descent is:\n",
    "\n",
    "$w^{t+1}=w^t-\\eta*\\bigtriangledown l$, where \n",
    "\n",
    "$\\bigtriangledown l= \\lambda w- \\frac{1}{N}X \\cdot [-y+\\frac{e^{Xw+w0}}{1+e^{Xw+w0}}]$\n",
    "\n",
    "$X$  is a matrix, $y$ is a vector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.4.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1067b4850>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nVppDxMzMSvv/zepS1mbtbo4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x106061690>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# initial conditins\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "nloop=1000\n",
    "# run Batch Gradient Descent\n",
    "w0,w_guess,LL=Batch_GD(w0, w_guess, X_train, Y_train, eta, lam, nloop)\n",
    "plt.plot(LL,'bo', label=r'log loss');\n",
    "plt.xlabel('Iteration number')\n",
    "plt.ylabel('log loss ')\n",
    "plt.title('Log loss function after each update step')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sum squared error for BDG with 1000 iterations', 54.0)\n"
     ]
    }
   ],
   "source": [
    "sse=SumSquaredError(w0, w_guess,X_test, Y_test)\n",
    "print('Sum squared error for BDG with 1000 iterations', sse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##2.4.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nB2gMWb7kWr6CAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x106057c10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#implement BDG with stoping criteria\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "w0,w_guess,LogLoss=convergeBDG(w0,w_guess,X_train,Y_train,eta,lam)\n",
    "plt.plot(LogLoss,'ro', label=r'log loss');\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sum squared error for BDG with 1000 iterations', 54.0)\n"
     ]
    }
   ],
   "source": [
    "sse=SumSquaredError(w0, w_guess,X_test, Y_test)\n",
    "print('Sum squared error for BDG with 1000 iterations', sse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Converged in 13 iterations with SSE=54"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##2.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.5.1\n",
    "\n",
    "##### The update for Stochastic Gradient Descent is:\n",
    "\n",
    "$w^{t+1}=w^t-\\eta*\\bigtriangledown l$, where \n",
    "\n",
    "$\\bigtriangledown l= \\lambda w- X_{j_0} \\cdot \n",
    "[-y_{j_0}+\\frac{e^{X_{j_0}w+w0}}{1+e^{X_{j_0}w+w0}}]$\n",
    "\n",
    "$X_{j_0}$  is a vector, $y_{j_0}$ is a number, i.e. $(X_{j_0},y_{j_0})$ is one data point"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.5.2 (a)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $\\lambda=0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#for lambda =0\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0\n",
    "w0, w_guess, LL = StochGD(w0,w_guess,X_train,Y_train,eta,lam)\n",
    "nrm=np.linalg.norm(w_guess, ord=2)\n",
    "print('when lambda=0 the L2 norm of weight vector is', nrm)\n",
    "\n",
    "plt.plot(LL,'ro', label=r'log loss')\n",
    "plt.title('Log loss function')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $\\lambda=0.3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#for lambda =0.3\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "w0, w_guess, LL =StochGD(w0,w_guess,X_train,Y_train,eta,lam)\n",
    "nrm=np.linalg.norm(w_guess, ord=2)\n",
    "print('when lambda=0 the L2 norm of weight vector is',nrm)\n",
    "plt.plot(LL,'ro', label=r'log loss')\n",
    "plt.title('Log loss function')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.5.2 (b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sse=SumSquaredError(w0, w_guess,X_test, Y_test)\n",
    "print('Sum squared error for SDG', sse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "for k in range(5):\n",
    "    w0, w_guess, LL =StochGD(w0,w_guess,X_train,Y_train,eta,lam)\n",
    "    \n",
    "plt.plot(LL,'ro', label=r'log loss')\n",
    "plt.title('Log loss function')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# initial conditins\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "nloop=1000\n",
    "# run Batch Gradient Descent 5 times\n",
    "for jj in range(5):\n",
    "    w0,w_guess,LL=Batch_GD(w0, w_guess, X_train, Y_train, eta, lam, nloop)\n",
    "plt.plot(LL,'bo', label=r'log loss');\n",
    "plt.xlabel('Iteration number')\n",
    "plt.ylabel('log loss ')\n",
    "plt.title('Log loss function')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Batch Gradient Descent converges faster"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.6.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# initial conditins\n",
    "N,d=X_train.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.1, 0.3\n",
    "nloop=5000\n",
    "# run Batch Gradient Descent\n",
    "w0,w_guess,LL=Batch_GD(w0, w_guess, X_train, Y_train, eta, lam, nloop)\n",
    "predict=prediction(w0,w_guess,X_test)\n",
    "PrecisionRecall(predict, Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###2.6.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('precision for 0 ', 0.93799472295514508, 'precision for 1 ', 0.028925619834710745)\n",
      "('recall for 0 ', 0.7515856236786469, 'recall for 1 ', 0.12962962962962962)\n"
     ]
    }
   ],
   "source": [
    "N,d=X_trainOversample.shape\n",
    "w0=0\n",
    "w_guess=np.zeros(d)\n",
    "eta, lam=0.01, 0.3\n",
    "nloop=5000\n",
    "w0,w_guess,LL=Batch_GD(w0, w_guess, X_trainOversample, Y_trainOversample, eta, lam, nloop)\n",
    "predict=prediction(w0,w_guess,X_test)\n",
    "PrecisionRecall(predict, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
